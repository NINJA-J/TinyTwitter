package org.university.db.project.tinytwitter.dao;

import java.util.List;

import org.apache.ibatis.annotations.*;
import org.university.db.project.tinytwitter.entity.Blog;
import org.university.db.project.tinytwitter.entity.Comment;

@Mapper
public interface CommentMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    @Delete("delete from comment where comment_id = #{commentId}")
    int deleteByPrimaryKey(Integer commentId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    @Insert("insert into comment (`date`, blog_id, create_date, author, content) " +
            "values (#{date}, #{blogId}, #{createDate}, #{author.userId}, #{content})")
    int insert(Comment record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    @Select("select blog_id, title, create_date, update_date, author, content from " +
            "comment where blog_id = #{blogId}")
    Comment selectByPrimaryKey(Integer commentId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    List<Comment> selectAll();

    List<Comment> find(String pattern);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(Comment record);

    @Select("select comment_id, `date`, blog_id, create_date, author, content, user_id, name from comment " +
            "left join user on comment.author = user.user_id" +
            "where blog_id = #{blogId")
    @Results(value = {
            @Result(column = "column_id", property = "columnId"),
            @Result(column = "blog_id", property = "blogId"),
            @Result(column = "user_id", property = "author.userId"),
            @Result(column = "name", property = "author.name")})
    List<Comment> getCommentAndUserByBlogId(int blogId);


}