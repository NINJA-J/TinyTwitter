package org.university.db.project.tinytwitter.dao;

import java.util.List;

import org.apache.ibatis.annotations.*;
import org.university.db.project.tinytwitter.entity.Blog;
import org.university.db.project.tinytwitter.entity.User;

@Mapper
public interface BlogMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blog
     *
     * @mbggenerated
     */
    @Delete("delete from blog where blog_id = #{blogId}")
    int deleteByPrimaryKey(Integer blogId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blog
     *
     * @mbggenerated
     */
    @Insert("insert into blog (title, create_date, update_date, author, content) " +
            "values (#{title}, #{createDate}, #{updateDate}, #{user.userId}, #{content})")
    int insert(Blog record);

    @Select("select blog_id from blog where title = #{title}")
    int getIdByTitle(String title);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blog
     *
     * @mbggenerated
     */
    @Select("select blog_id, title, create_date, update_date, author, content from " +
            "blog where blog_id = #{blogId}")
    Blog selectByPrimaryKey(Integer blogId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blog
     *
     * @mbggenerated
     */
    @Select("select blog_id, title, create_date, update_date, content," +
            "user_id user_user_id, name user_name " +
            "from blog left join user on blog.author = user.user_id")
    @Results(id = "blogMap",value = {
            @Result(column = "blog_id", property = "blogId"),
            @Result(column = "title", property = "title"),
            @Result(column = "create_date", property = "createDate"),
            @Result(column = "update_date", property = "updateDate"),
            @Result(column = "content", property = "content"),
            @Result(property = "user", one = @One(resultMap = "userMap", columnPrefix = "user_"))
    })
    List<Blog> selectAll();

    @Results(id = "userMap", value = {
            @Result(column = "user_id", property = "userId"),
            @Result(column = "name", property = "name")
    })
    @Select("select *from blog")
    User find(String string);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table blog
     *
     * @mbggenerated
     */
    @Update("update blog set title = #{title}," +
            "      create_date = #{createDate}," +
            "      update_date = #{updateDate}," +
            "      author = #{author}," +
            "      content = #{content}" +
            "    where blog_id = #{blogId}")
    int updateByPrimaryKey(Blog record);

    @Insert("insert into like(blog_id, user_id) values (#{user_id}, #{blog_id}")
    void addLike(int user_id, int blog_id);

    @Delete("delete from like where user_id = #{user_id} and blog_id = #{blog_id}")
    void deleteLike(int user_id, int blog_id);

    @Insert("insert into collection(blog_id, user_id) values (#{user_id}, #{blog_id}")
    void addCollect(int user_id, int blog_id);

    @Delete("delete from collection where user_id = #{user_id} and blog_id = #{blog_id}")
    void deleteCollect(int user_id, int blog_id);




}